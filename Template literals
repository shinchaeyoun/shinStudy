backquote 문자열의 장점
1. 엔터키 가능
2. 중간중간 변수 넣기 쉬움

(예전 방식) '문자'+변수;
(backquote 방식) `문자 ${변수}`; `<div>${변수}</div>`;

=========
tagged literal
`문자`를 해체분석할 수 있음
- 단어 순서를 변경하거나
- 단어를 제거하거나
- ${변수} 위치를 옮기거나
(쉽게 가능)


문자해체분석기 역할



function 해체분석기(문자들, 변수들){
  console.log(문자들);
  console.log(변수들);
};
파라미터를 출력해주는 함수.
tag 실행

해체분석기`안녕하세요 ${변수}입니다`

`안녕하세요 ${변수}입니다`

해체분석기() 파라미터1. 문자들을 array화 해줌
해체분석기() 파라미터2. ${변수}를 뜻함
해체분석기() 파라미터3. 두번째 ${변수}를 뜻함

문자 해체 기준은 중괄호를 기준으로 문자들 분리.
어레이에 담아줌
${} 양옆 문자들은 어레이에 담아줌

-------
tagged literal 사용 예시)
글자의 순서를 변경하고 싶을 때

function 해체분석시(문자들, 변수들){
  console.log(문자들[1]+문자들[0]) == 입니다안녕하세요
  console.log(문자들[1]+변수들+문자들[0]) == 입니다손흥민안녕하세요
};

태그드리터럴


-------------
Q1. 문자 단어 순서 바꾸기

var pants = 20;
var socks = 100;
`바지${pants} 양말${socks}`

function 해체분석기 (text, pants, socks){
  console.log(text[1] + pants + text[0] + socks)
}

해체분석기 `바지${pants} 양말${socks}`

Q2.
function 해체분석기 (text, pants, socks){
  if(pants === 0) {
    ; pants = outOfStock
    console.log(`pants is out of stock Socks` + socks);
  };
};
해체분석기 `바지${pants} 양말${socks}`;

===========
3. Spread Operator
= 괄호 벗겨주세요~
= 중괄호, 대괄호, 소괄호 안에서만 사용 가능

...spread Operator
내용물을 빼고 싶을 때 사용
1. Array에 붙이면 대괄호를 제거해줌
2. 문자에 붙이면 펼쳐준다

var 어레이 = ['hello', 'world'];
console.log(어레이) == ['hello', 'world'];
console.log(...어레이) == hello world //대괄호를 제거하는 문법

var 문자 = 'hello'
console.log(...문자)
console.log('h','e','l','l','o')
console.log(문자[1]) 문자도 array 처럼 인덱싱이 가능

활용)
쓸곳1. 어레이 합치기, 복사 / Deep copy
쓸곳2. 오브젝트 합치기 / Deep copy

var a = [1,2,3];
var b = [4,5];

var c = [...a]; // 1,2,3
var c = [...a, ...b]; // 1,2,3,4,5
어레이를 합치거나 복사하기 유용

-------------
deep copy 할 때 유용함

var a = [1,2,3];
var b = a; <= 그냥 등호로 복사하면 값을 공유함

a[3] = 4;

console.log(a) // 1,2,3,4
console.log(b) // 1,2,3,4

reference data type (array, Object) 값 공유가 일어남

독립적인 값을 가지도록 Array, Object를 복사하려면
Spread operator 이용
var a = [1,2,3];
var b = [...a];

-----------
오브젝트 합치기

var o1 = {a:1, b:2};
var o2 = {...o1, c:3};

console.log(o2); // a:1, b:2, c:3
대괄호 벗기기, 중괄호 벗기기 가능

o1을 o2에 deep copy 하려면
var o1 = {a:1, b:2};
var o2 = { ...o1 };

값 중복이 일어난다면?
- 가장 뒤에 있는걸 적용

var o1 = {a:1, b:2};
var o2 = {a:2, ...o1 }; // a:1, b:2

var o1 = {a:1, b:2};
var o2 = {...o1, a:2}; // a:2

..o1; = 에러

쓸곳3. 함수 파라미터 넣을 때

function 더하기(a,b,c){
  console.log(a+b+c)
};

더하기(1,2,3);

var 어레이 = [10,20,30];

더하기(어레이[0], 어레이[1], 어레이[2]);
더하기.apply(undefined, 어레이);
 -> undefined에 적용을 해서 실행해주세요. 라는 뜻
 그냥 더하기() 함수가 그대로 실행됨.
 apply를 쓴 이유는 파라미터로 array 집어넣기가 가능해서 사용함.

더하기(...어레이);

---------
apply 함수 개념설명
함수를 옮겨와서 실행해주세요.

var person = {
  인사: function(){
    console.log(this.name + '안녕');
  }
};

var person2 = {
  name: '손흥민'
};

person.인사();
person.인사.apply(person2); => 손흥민 안녕 this.name에 값이 들어가 있어서 name이 들어감

------
call
apply와 똑같은 기능을 하는 함수
파라미터

person.인사.apply(person2, [1, 2])
person.인사.call(person2, 1, 2)
apply는 파라미터를 array로 작성


-------------
10. ES6-style-function

함수의 default 파라미터

function 더하기 (a,b=10){
  console.log(a + b)
};
더하기(1); // b자리에 파라미터 안넣었을 때만 발동
더하기(1,2); 
더하기(); NaN not a number 

function 더하기 (a, b= 2*5 ){
  console.log(a + b)
};

function 더하기 (a, b= 2*a ){
  console.log(a + b)
};
더하기(1); b자리에 2(2*a)가 들어감

-
function 임시함수(){
  return 10 //함수 실행하고 남길 값
};

function 더하기 (a, b= 임시함수()){ //b자리에 파라미터 안넣었을 때만 발동. 10이 들어가게 됨
  console.log(a + b)
};
더하기(1);

=======
함수의 arguments

function 함수(a,b,c) { -> 파라미터
  console.log(arguments); -> 알규먼트
};
모든 파라미터를 한꺼번에 싸잡아서 다루고 싶을 경우
= arguments 사용

arguments = 모든 파라미터를 []안에 넣은 변수


입력한 파라미터 전부 콘솔창에 출력해주는 함수
function 함수 (a,b,c,d,e,f) {
  for(let i = 0; i<arguments.length; i ++){
    console.log(arguments[i])
  }
}

----------
11. ES6-style-function2
rest 파라미터

... 1. spread operator 2. rest parameter
function 함수2(a,b, ...파라미터들){ -> rest파라미터
  console.log(파라미터들); // 모든 파라미터를 []에 보관해줌
  console.log(파라미터들[1]);
};

함수2 (1,2,3,4,5,6,7);
함수 안에 들어온 파라미터를 전부 담은 array 출력

arguments: 모든 파라미터를 []에 담아줌
rest parameter: 이 자리에 오는 모든 파라미터를 []에 담아줌

------
...rest vs ...spread 구분하기
1. 함수파라미터 자리에 붙으면 rest
2. 나머지는 spread

-------
예제
모든 파라미터들을 하나씩 콘솔창에 출력해주는 함수

function quiz1(...rest) {
  for(let i=0; i < rest.length; i++){
    console.log(rest[i]);
  };
};
quiz1(1,2,3,4,5,6,7,8)

...rest는 파라미터가 몇개 들어올지 미리 지정안해줘도 됨

...rest 파라미터 주의점
1. 가장 뒤에 써야함 // '여기 뒤에있는 모든 파라미터' 라는 뜻함
2. 두번 이상 사용 금지


===========
연습문제

1. spread 문제 1
var a = [1,2,3];
var b = '김밥';
var c = [...b, ...a];
console.log(c);

위 코드의 출력 결과는?

== ['김','밥',1,2,3]


2. spread 문제 2
var a = [1,2,3];
var b = ['you', 'are'];
var c = function(a,b){
  console.log( [[...a], ...[...b]][1] )
}
c(a,b);
대괄호가 가득한 위 코드의 출력 결과는?

== 'you'

--해설
  console.log( [[1,2,3], 'you', 'are'][1] )
  == 'you'


3. default 파라미터 문제 1
function 함수(a = 5, b = a * 2 ){
  console.log(a + b);
  return 10
}
함수(3);

위 코드의 출력 결과는?

== 9
b자리에 파라미터를 안넣어서 b=a*2 는 다시 말해서 b=3*2
b=6
console.log(3+6) = 9
 디폴트 파라미터가 발동


4. default 파라미터 문제 2
function 함수(a = 5, b = a * 2 ){
  console.log(a + b);
}
함수(undefined, undefined);

위 코드의 출력 결과는?

==
15
a,b 자리에 값이 없어서 걍 5+10
  디폴트 파라미터 발동
  정의 안된 파라미터


5. array를 만들어주는 함수를 제작하고 싶습니다.
실용성은 0이지만 일단 해보도록 합시다.
파라미터로 자료들을 입력하면 그걸 그대로 array를 만들어주는 함수를 만들고 싶습니다. 

function 어레이(){
  (여기 어떤코드가 들어가면 될까요?)
}

var newArray = 어레이(1,2,3,4,5);
console.log(newArray); 

이렇게 작성하면 [1,2,3,4,5]가 출력되어야합니다.
함수에 숫자를 100개 집어넣으면 Array안에 숫자100개가 들어가야하고요.
어레이라는 함수를 어떻게 만들면 될까요? (new 키워드 사용금지)

==
function 어레이(...rest){
  return rest
}
var newArray = 어레이(1,2,3,4,5);
console.log(newArray);

arguments 로도 가능
    function 어레이(){
      return arguments
    }
    var newArray = 어레이(1,2,3,4,5);
    console.log(newArray);
이건가?


6. 최댓값 구하기
자바스크립트에서 최댓값을 구하고 싶으면.. Math.max()라는 기본 내장함수를 쓸 수 있습니다. 

Math.max(5,6,4,3) 
이렇게 쓰시면 6이라고 최댓값을 출력해줍니다. 그냥 소괄호 안에 있는 모든 숫자 중에 가장 큰 숫자를 퉤 뱉는다는 소리입니다. 

근데 최댓값을 검사하고 싶은 숫자들이 좀 많습니다. 

var numbers = [2,3,4,5,6,1,3,2,5,5,4,6,7];
numbers 안에 있는 숫자들을 Math.max()에 집어넣어서 쓰고 싶은데
직접 소괄호 안에 10개넘는 숫자를 손수 기입하기 귀찮습니다.
이럴 땐 어떻게 코드를 짜면 좋을까요?

== 
Math.max(...numbers)

-- 해석
apply로도 가능


7. 글자를 알파벳순으로 정렬해주는 함수를 만들고 싶습니다. 
일단 자바스크립트는 array 내의 데이터를 알파벳순으로 정렬하고 싶을 때
sort()라는 array 내장함수를 붙여 사용합니다. (array에만 적용가능)

 console.log( [ 'b', 'c', 'a' ].sort() );
//[ 'a', 'b', 'c' ] 출력됨

이렇게 sort()만 붙이면 쉽게 정렬이 가능합니다. 끝입니다. 

그런데 우리는 array가 아니라 문자열에도 적용할 수 있는 알파벳순 정렬함수를 하나 만들고 싶습니다. 

function 정렬(){
  (여기 어떤 코드가 들어가야할까요?)
}

정렬('bear'); 

정렬('bear')라고 사용하면
콘솔창에 a b e r 이렇게 입력한 문자를 알파벳 순으로 출력되게 만들고 싶으면 어떻게 해야할까요? 
(sort() 함수 사용가능)

==
function 정렬(a){
  console.log([...a].sort())
}
정렬('bear'); 

--해석
문자 자료형은 .sort()붙이기 불가능 array에만 사용 가능

1.
function 정렬(a){
  console.log([...a].sort().join())
}
정렬('bear'); // a,b,e,r
2.
function 정렬(a){
  console.log(...[...a].sort())
}
정렬('bear'); //a b e r


8. 데이터마이닝 기능 만들기 
데이터분석 하는 사람들이 자주 만들어 쓰는 함수가 있습니다. 
알파벳들의 출현 갯수를 세어주는 함수입니다. 우리도 한번 만들어봅시다. 

글자세기('aacbbb') 라고 입력하면 콘솔창에
{ a : 2, b : 3, c : 1 }
▲ 이렇게 출력해주는 글자세기() 라는 함수를 만들고 싶습니다.
쉽게말하자면 입력한단어에 들어있는 알파벳의 갯수를 세어서 오브젝트에 기록해주고 출력까지 해주는 함수입니다. 
글자세기라는 함수를 어떻게 만들면 될까요? 

==
function 글자세기(){
  console.log()
};
글자세기('aacbbb')

-- 해석
function 글자세기(txt){
  .forEach는 array에만 사용 가능
  [...txt]
};

글자엔 반복문을 돌릴 수 없는데 글자에 반복문을 돌리고 싶면 [...글자]로 array로 변경하여 사용

function 글자세기(txt){

  var 결과 = {};
  [...txt].forEach(function(i){
    만약에 결과에 i가 있으면 +1 해주시고
    없으면 i : 1 집어넣으세요
    if(결과[i] > 0){
      결과[i] = 결과[i] + 1;
    } else {
      결과[i] = 1;
    }
  });

  console.log(결과)
};